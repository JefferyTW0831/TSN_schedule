此方法有一個盲點，造成相對於origin_method效果會比較差的原因。

那就是當我們再用origin排的時候，是照著流水序排下去的

我們用deadline/path_len排的時候，理想上來看有機會牌更多的flows進來，但是有可能也會導致失去可排成的機會：
當我們deadline/path數值越低時，優先權越高，是因為deadline越短path越長的時候，是最需要趕快排入時間表裡面的，因為這種flow比較緊急，要先排，依照緊急程度從最緊急排到最不緊急的話，才能夠最大化排成，但要還是提醒一次，這是理想上!

這個時候有一個例外出來了
當我們利用deadline/path的越低越優先時，如果選到最低值得flow優先排入，同時這個flow的路徑，與其他相衝突的flow是最多的，這樣先排入時間表的話，會造成更多衝突的發生。
(這邊提出一個名詞叫做"common_link"，意思為會與其他flow相衝突的link)