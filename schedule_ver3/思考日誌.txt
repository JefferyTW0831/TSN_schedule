2023_09_23:
今天在思考將TIME_TABLE分出來，來讓整個schedule程式碼不要長太胖。
2023_09_24:
在排flow的時候發現先把TIME_TABLE弄出來也沒辦法做到好，有考慮把TIME_TABLE放到最後再拿出來使用(demo階段)
目前還是利用path_dic來整理flow為主，但目前還卡在排每個flow_中間path2的時間，這個動作要怎麼寫比較好，(想不出來要怎麼寫(schedule_middle的部分))
之前有寫過但是那個是硬排的(依照flow的規格直接排)，沒有先與其他flow比較相同path上的衝突問題，並利用篇一時間來達成排成問題，而是先硬排然後在比較衝突，但這樣的話就缺少彈性排程這個效果了。
先跟老師說抱歉我真的想很久，刪了又刪，改了又刪。有可能是我真的把問題想得太複雜，讓整個結構的設計很不好(其實看上去是看得動的，但是可能這樣的設計方式對後續排程操作是非常困難的)
18:53先發佈一次，等等00:00我在想一下寫法重新發佈一次....


2023_09_25:
現在目前卡在schedule_middle這段程式瑪上面，用了四個for的巢狀迴圈為了就是讓有共同link的flow整理出來，並利用time_occupy_list來查看這link上有那些時間點已經被佔據的，但這個方法有個缺失的地方，
就是他可以挑選出共同Link，但沒辦法記著前後link的關聯性.......。還在想有甚麼方法可以同時做到這幾件事情.....。
建造出link_time_occupied_list及prev_links_occupired
想到的想法：
1.先排common_link的第一個Link，然後先尋找有這個link的flow(先依照Flow名稱序優先挑選)
2.找到之後一開始先提取此link之前的path的時間點(並記錄在prev_links_occupied)，這些時間點也都不能被拿來使用，同時也查看link_time_occupy_list裡面有沒有已占用的資源
3.比對之後挑選沒有被占用的時間點排入，排完之後接著排下一個flow(從common_link中可得知)的相同link，直到排完所有flows相同link的為止
4.接著排common_link的下一個link項

決定先寫個流程圖：
1.先將每個flow的第一個link及最後一個link排好，此時會剩下中間的links沒有排
2.排完之後比對一下有沒有必然發生衝突的links(因為頭尾固定，所以更改空間)，有衝突的link，(目前先這個方式)會依照flow名稱，名稱數字越小的先留下,其餘排不下的flows移動到wait_to_schedule裡面。(移動到wait_to_schedule這點後來再寫的時候忘記了，之後要再補上這個條件)
3.最後可以得到每個flow頭尾都有排好的時間表
4.排每個flow的中間部分：
    0.瀏覽每個flow取出common_links並保存起來
    1.先排common_link的第一個Link，然後先尋找有這個link的flow(先依照Flow名稱序優先挑選)
    2.找到之後一開始先提取此link之前的path的時間點(並記錄在prev_links_occupied)，這些時間點也都不能被拿來使用，同時也查看link_time_occupy_list裡面有沒有已占用的資源
    3.比對之後挑選沒有被占用的時間點排入，排完之後接著排下一個flow(從common_link中可得知)的相同link，直到排完所有flows相同link的為止
    4.接著排common_link的下一個link項
    5.重複1.~4.直到排所有沒有衝突的flows
5.中間排完之後，要將wait_for_flows與原本common_links內有衝突的flows做交換 

之前是先在同個flow上面依據第一格link的時間，依照flow的size、priod自動向後推算後走過隨後link的占用時間點，但這樣的話就沒有彈性排程的效果(彈性排程效果就是，在排成的時候如果遇到相同link上同時間點上，同時有兩格flow占用，則可以依據其他條件前後推移時間點，讓以讓這兩個flow都有機會成功傳輸)，只能硬生生地把相同占用的flow選擇性地放棄排程。


2023_09_27:
目前看似已經排好了，但我注意到後面的flow有些時間點比較奇怪一點，但由於儲存的資料有點大量，從這些資料裡面無法輕易找出不符合規律並得到解決方法，所以下個階段可能會採取兩個應對方式：
1.會先將這些資料構成圖表，需要找一下哪種製圖方式是最好的
2.將這些結果資料用紙筆過濾出來，找一下跟思路上有分歧的地方，再一一DEBUG。


2023_10_03
利用pyQt畫圖，今天處理了一下總務的東西，畫圖的部分還在思考要怎麼設計比較好。

2023_10_04
先回顧一下禮拜一所說的(目標與解決)：
1.確認一個TSN系統是採用雙向通訊的網路線(記事本與圖片及論文)
2.封包可不可以拆開傳輸，一定要符合size傳完嗎，這個目前沒有找到相關資料，但是繪製訂size多少是因為會取每個傳遞的封包的最大公因數，來當作一個單位的資料量，所以才有size大小之分
3.需要將重疊的部分標示出來


2023_10_12:
回顧：
1.取消最後一條link先排的狀況
2.讓每個flow都不會有衝突為目標


2023_10_15:
